pipeline {
    agent any
    parameters {
        string(name: 'ENV', defaultValue: 'dev', description: 'Env name')
        string(name: 'REGION', defaultValue: 'us-east-1', description: 'AWS region')
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(
            artifactDaysToKeepStr: ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '30' : '5',
            artifactNumToKeepStr: ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '10' : '2',
            daysToKeepStr:  ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '30' : '5',
            numToKeepStr:  ("${BRANCH_NAME}" == 'master' && "${params.ENV}" == 'prod') ? '30' : '10',
            ))
    }
    environment {
        TIMESTAMP = sh(script: 'date +%s',returnStdout: true).trim()
        APP_VERSION = "${TIMESTAMP}-${BUILD_ID}"
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        MYSQL_ROOT_PASSWORD = sh(script: "aws ssm get-parameter --name mysql_root_password --region ${params.REGION} --with-decryption --no-cli-pager | jq --raw-output '.Parameter.Value'",returnStdout: true).trim()
        MYSQL_PASSWORD = sh(script: "aws ssm get-parameter --name mysql_password --region ${params.REGION} --with-decryption --no-cli-pager | jq --raw-output '.Parameter.Value'",returnStdout: true).trim()
        MYSQL_REPLICATION_PASSWORD = sh(script: "aws ssm get-parameter --name mysql_replication_password --region ${params.REGION} --with-decryption --no-cli-pager | jq --raw-output '.Parameter.Value'",returnStdout: true).trim()
    }

    stages {
        stage('Build app') {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            steps {
                    dir('k8s-practice') {
                        echo 'Building app'
                        sh './gradlew build'
                    }
                    
            }
        }

        stage('Test app') {
            steps {
                dir('k8s-practice') {
                    echo 'Running tests'
                    sh './gradlew test'
                }
            }

            post {
                failure {
                    sh 'exit 1'
                }
            }
        }

        stage('Login to registry') {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            steps {
                script {
                    echo 'Logging into Docker Hub'
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                        sh 'echo $PASS | docker login -u $USER --password-stdin'
                    }
                }
            }
        }

        stage('Build image') {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            steps {
                script {
                    dir('k8s-practice') {
                        echo 'Building container image'
                        sh 'docker build -t vladsanyuk/java-app:${APP_VERSION} .'
                    }
                }
            }
        }

        stage('Push to registry') {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            steps {
                script {
                    echo 'Pushing image to registry'
                    sh 'docker push vladsanyuk/java-app:${APP_VERSION}'
                    echo 'Clean-up image'
                    sh 'docker rmi vladsanyuk/java-app:${APP_VERSION}'
                }
            }
        }

        stage('Get kubeconfig') {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            steps {
                script {
                    echo 'Getting kubeconfig'
                    sh "aws eks update-kubeconfig --region us-east-1 --name ${params.ENV}-eks-cluster"
                }
            }
        }

        stage('Deploy to cluster') {
            when {
                expression {
                    BRANCH_NAME == 'master'
                }
            }
            steps {
                script {
                    dir('k8s-practice') {
                        echo 'Deploying app'
                        withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                            sh """
                            # set +x
                            ansible-playbook ansible/deploy_kubernetes.yaml -e 'mysql_root_password=${MYSQL_ROOT_PASSWORD} mysql_password=${MYSQL_PASSWORD} mysql_replication_password=${MYSQL_REPLICATION_PASSWORD} docker_username=${PASS} docker_password=${USER} image_tag=${APP_VERSION}'
                            # set -x
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    cleanWhenAborted: true,
                    cleanWhenFailure: true,
                    cleanWhenSuccess: true,
                    cleanWhenUnstable: true)
        }
    }
}
